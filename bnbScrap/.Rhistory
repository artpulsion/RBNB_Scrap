source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/%d"
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser <- function(houses.city) {
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/%d"
index = 0
# for each houses find the owner
for (id in houses.city) {
# get the url of the current house
url.user <- sprintf(url.user, id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
# Why we will take the most frequent pattern of 'users/show/****' because
# I didn't find a technic to get with good assurance the id of the host
# based on the class. Thus, to target him in the chaos I decide to take the most
# common string based on the pattern below and assume take this string is the host
# because in generale the host is highly present in his page.
# user id in string format : get the most frequent user
user.id <- sort(table(page),decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
index = index + 1
cat(index)
}
}
getUser(houses.city = houses.city)
flat_porto <- houses.city
getUser <- function(flat_porto) {
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/%d"
index = 0
# for each houses find the owner
for (id in houses.city) {
# get the url of the current house
url.user <- sprintf(url.user, id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
# Why we will take the most frequent pattern of 'users/show/****' because
# I didn't find a technic to get with good assurance the id of the host
# based on the class. Thus, to target him in the chaos I decide to take the most
# common string based on the pattern below and assume take this string is the host
# because in generale the host is highly present in his page.
# user id in string format : get the most frequent user
user.id <- sort(table(page),decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
index = index + 1
cat(index)
}
}
flat_porto
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
houses.city <- flat_porto
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/%d"
index = 0
# for each houses find the owner
for (id in houses.city) {
# get the url of the current house
url.user <- sprintf(url.user, id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
# Why we will take the most frequent pattern of 'users/show/****' because
# I didn't find a technic to get with good assurance the id of the host
# based on the class. Thus, to target him in the chaos I decide to take the most
# common string based on the pattern below and assume take this string is the host
# because in generale the host is highly present in his page.
# user id in string format : get the most frequent user
user.id <- sort(table(page),decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
index = index + 1
cat(index)
}
# get the url of the current house
url.user <- sprintf(url.user, id)
url.user
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = flat_porto)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
cat(sprintf('User: %d/%d', index, length(ids.flat) ))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# fetch the user into the others
all.users.ids <- c(all.users.ids, user.id)
# structure for all users
all.users.ids <- c()
# fetch the user into the others
all.users.ids <- c(all.users.ids, user.id)
# fetch the user into the others
all.users.ids <- c(all.users.ids, user.id)
all.users.ids
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser <- function(houses.city) {
# structure for all users
all.users.ids <- c()
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/%d"
index = 0
# for each houses find the owner
for (id in ids.flat) {
# get the url of the current house
url.user <- sprintf(url.user, id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
# Why we will take the most frequent pattern of 'users/show/****' because
# I didn't find a technic to get with good assurance the id of the host
# based on the class. Thus, to target him in the chaos I decide to take the most
# common string based on the pattern below and assume take this string is the host
# because in generale the host is highly present in his page.
# user id in string format : get the most frequent user
user.id <- sort(table(page),decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
# fetch the user into the others
all.users.ids <- c(all.users.ids, user.id)
# Information about the avancement
index = index + 1
cat(sprintf('Users: %d/%d', index, length(ids.flat) ))
}
housesOwner <- cbind(houses.city, all.users.ids)
return(housesOwner)
}
getUser(houses.city = flat_porto)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- housesgetUser(houses.city = flat_porto)
portoHouseOwner <- getUser(houses.city = flat_porto)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
c('21321', 213123)
a = c('21321', 213123)
a
b = c('21321', 213123)
a
b
rbind(a,b)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
houses.city <- flat_porto
# structure for all users
all.users.ids <- c()
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/%d"
index = 0
ids.flat <- ids.flat[1:10]
ids.flat
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- getUser(houses.city = flat_porto)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- getUser(houses.city = flat_porto)
portoHouseOwner <- getUser(houses.city = flat_porto[, 1:10])
portoHouseOwner <- getUser(houses.city = flat_porto %>% slice(1:10))
View(portoHouseOwner)
all.users.flats.ids <- portoHouseOwner
all.users.flats.ids
all.users.flats.ids %>% data.frame()
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# rename the dataframe with the appropriate colnames which match with our api
colnames(all.users.flats.ids) = c('bnb_user_id', 'bnb_flat_id')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# convert the rows we binds as a dataframe
all.users.flats.ids %<>% data.frame
# rename the dataframe with the appropriate colnames which match with our api
colnames(all.users.flats.ids) = c('bnb_user_id', 'bnb_flat_id')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- getUser(houses.city = flat_porto %>% slice(1:10))
View(portoHouseOwner)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- getUser(houses.city = flat_porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
View(flat_porto)
portoHouseOwner <- getUser(houses.city = flat_porto %>% slice(1:10))
cat('\n', user.flat.id)
cat(sprintf('%d \n', user.flat.id))
# fetch the user and his flat
user.flat.id <- c(user.id, id)
cat(sprintf('%d \n', user.flat.id))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# fetch the user and his flat
user.flat.id <- c(user.id, id)
cat( user.flat.id)
getUser(houses.city = flat_porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = flat_porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = flat_porto %>% slice(1:10))
# get the url of the current house
url.user <- paste0(url.user, id)
url.user
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# create the base url
url.user <- "https://www.airbnb.pt/rooms/"
# get the url of the current house
url.user <- paste0(url.user, id)
url.user
# create the base url
url.user <- "https://www.airbnb.pt/rooms/"
id
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
ids.flat
for(id in ids.flat){}
id
# get the url of the current house
url.user <- paste0(url.user, id)
url.user
# load the webpage
webpage.url <- read_html(url.user)
getUser <- function(houses.city) {
# structure for all users
all.users.flats.ids <- c()
# get the ids of the current houses
ids.flat <- houses.city %>% pull(bnb_flat_id)
ids.flat <- as.numeric(as.character(ids.flat))
# create the base url
url.user <- "https://www.airbnb.pt/rooms/"
index = 0
# for each houses find the owner
for (id in ids.flat) {
# get the url of the current house
url.user <- paste0(url.user, id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
# Why we will take the most frequent pattern of 'users/show/****' because
# I didn't find a technic to get with good assurance the id of the host
# based on the class. Thus, to target him in the chaos I decide to take the most
# common string based on the pattern below and assume take this string is the host
# because in generale the host is highly present in his page.
# user id in string format : get the most frequent user
user.id <- sort(table(page), decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
# fetch the user and his flat
user.flat.id <- c(user.id, id)
cat( user.flat.id)
cat('\n')
cat(url.user)
cat('\n')
# Information about the avancement
index = index + 1
#cat( sprintf( 'Users: %d/%d \n', index, length(ids.flat)) )
}
# convert the rows we binds as a dataframe
all.users.flats.ids %<>% data.frame
# rename the dataframe with the appropriate colnames which match with our api
colnames(all.users.flats.ids) = c('bnb_user_id', 'bnb_flat_id')
return(all.users.flats.ids)
}
getUser(houses.city = flat_porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = flat_porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- getUser(houses.city = flat_porto %>% slice(1:10))
View(portoHouseOwner)
# create the base url
url.user <- sprintf("https://www.airbnb.pt/rooms/%d", id)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
# user id in string format : get the most frequent user
user.id <- sort(table(page), decreasing=TRUE) %>% names(.) %>% first()
# load the webpage
webpage.url <- read_html(url.user)
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
# fetch the user and his flat
user.flat.id <- c(user.id, id)
user.flat.id
cat( user.flat.id)
cat('\n')
cat(url.user)
cat('\n')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
portoHouseOwner <- getUser(houses.city = flat_porto %>% slice(1:10))
View(portoHouseOwner)
a <- '_2930ex'
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
page <- webpage.url %>% html_nodes(a) %>% html_attr("href")
page
a <- '._2930ex'
page <- webpage.url %>% html_nodes(a) %>% html_attr("href")
page
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
page <- webpage.url %>% html_nodes(a)
page
page <- webpage.url %>% html_nodes(a) %>% html_attrs()
page
page <- webpage.url %>% html_nodes(a) %>% html_attr("href)
# Why we will take the most frequent pattern of 'users/show/****' because
# I didn't find a technic to get with good assurance the id of the host
# based on the class. Thus, to target him in the chaos I decide to take the most
# common string based on the pattern below and assume take this string is the host
# because in generale the host is highly present in his page.
# user id in string format : get the most frequent user
user.id <- sort(table(page), decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
# fetch the user and his flat
user.flat.id <- c(user.id, id)
cat( user.flat.id)
cat('\n')
cat(url.user)
cat('\n')
# Information about the avancement
index = index + 1
cat( sprintf( 'Users: %d/%d \n', index, length(ids.flat)) )
# bind the each user . flat at each iteration in order to construct a base
all.users.flats.ids <- rbind(all.users.flats.ids, user.flat.id)
}
# convert the rows we binds as a dataframe
all.users.flats.ids %<>% data.frame
# rename the dataframe with the appropriate colnames which match with our api
colnames(all.users.flats.ids) = c('bnb_user_id', 'bnb_flat_id')
return(all.users.flats.ids)
}
page <- webpage.url %>% html_nodes(a) %>% html_attr('href')
page <- webpage.url %>% html_nodes(a) %>% html_attr('href')
page
a <- '._2930ex'
page <- webpage.url %>% html_nodes(a) %>% html_attr('href')
page
page <- webpage.url %>% html_nodes(a) %>% html_attr()
page <- webpage.url %>% html_nodes(a) %>% html_attrs()
page
page <- webpage.url %>% html_nodes(a) %>% html_text()
page
page <- webpage.url %>% html_nodes(a)
page
page[1]
page[1]
page[2]
page[4]
page[3]
e<-page[1]
e
View(e)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
library(bnbScrap)
results <- bnbScrap:::getUser(houses.city = bnbScrap:::getHousesCity(city = 'Porto', is.df = TRUE))
results <- bnbScrap:::getUser(houses.city = bnbScrap:::getHousesCity(city = 'Porto', is.df = TRUE))
View(results)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
houses.porto <- bnbScrap:::getHousesCity(city='Porto')
houses.porto <- bnbScrap:::getHousesCity(city='Porto', is.df = T)
View(houses.porto)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = houses.porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = houses.porto %>% slice(1:10))
houses.city <- houses.porto
# get the ids of the current houses
houses.city$bnb_flat_id %<>% as.numeric(as.character(ids.flat))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
# get the ids of the current houses
houses.city$bnb_flat_id %<>% as.numeric(as.character())
houses.city$bnb_flat_id
houses.city$bnb_flat_id %<>% as.numeric(as.character(.))
houses.city$bnb_flat_id
houses.city <- houses.porto
houses.city$bnb_flat_id %<>% as.numeric(as.character(.))
houses.city$bnb_flat_id
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
houses.city <- houses.porto
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
houses.city %<>% mutate( bnb_flat_id = as.numeric(as.character(bnb_flat_id)) )
houses.city$bnb_flat_id
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = houses.porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
houses.city$bnb_flat_id
getUser(houses.city = houses.porto %>% slice(1:10))
length(houses.city$bnb_flat_id)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = houses.porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = houses.porto %>% slice(1:10))
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
getUser(houses.city = houses.porto %>% slice(1:10))
walley <- getUser(houses.city = houses.porto %>% slice(1:10))
walley
View(walley)
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
View(houses.city)
View(walley)
bnbScrap:::g
bnbScrap:::getUser(bnbScrap:::getHousesCity(city = 'Porto', is.df = TRUE))
id <- 17298909
# create the base url
url.user <- sprintf("https://www.airbnb.pt/rooms/%d", id)
# load the webpage
webpage.url <- read_html(url.user)
library(bnbScrap)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
page
# user id in string format : get the most frequent user
user.id <- sort(table(page), decreasing=TRUE) %>% names(.) %>% first()
# get the integer part of the string and convert it as numeric
user.id %<>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
# fetch the user and his flat
user.flat.id <- c(user.id, id)
user.id
# create the base url
url.user <- sprintf("https://www.airbnb.pt/rooms/%d", id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
user.id <- sort(table(page), decreasing=TRUE)
user.id
id <- 16871036
# create the base url
url.user <- sprintf("https://www.airbnb.pt/rooms/%d", id)
# load the webpage
webpage.url <- read_html(url.user)
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
user.id <- sort(table(page), decreasing=TRUE)
user.id
source('C:/Users/sofianembarki/Desktop/bnbProject/bnbScrap/R/getUsers.R')
user.class <- "._ni9axhe"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
page
user.class <- "._e296pg"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
page
# get the all users present on the page
user.class <- "._110nrr2"
page <- webpage.url %>% html_nodes(user.class) %>% html_attr("href")
page
